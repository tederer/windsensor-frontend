// beaufort             0  1  2  3  4   5   6   7   8   9   10  11  12
var minimumKtsForBft = [0, 1, 4, 7, 11, 16, 22, 28, 34, 41, 48, 56, 64];

var Windchart = function Windchart() {

   var colorMapping = [new ColorMapping(bftToKts(0), {r:   0, g:   0, b: 255}),
                     new ColorMapping(bftToKts(4), {r:   0, g: 255, b:   0}),
                     new ColorMapping(bftToKts(7), {r: 255, g:   0, b:   0})];

   var colorGradient = new ColorGradient(colorMapping);

   var chart;

   var convertSampleData = function convertSampleData(samples) {
      var result = {};
      result.minimumSpeeds = [];
      result.averageSpeeds = [];
      result.maximumSpeeds = [];
      var maxSpeedInKts = 0;

      if (samples.length >= 2) {
         var oldestTimestampInMillis = (new Date(samples[0].timestamp)).getTime();
         var newestTimestampInMillis = (new Date(samples[samples.length - 1].timestamp)).getTime();
         var middleTimestampInMillis = oldestTimestampInMillis + (newestTimestampInMillis - oldestTimestampInMillis) / 2;
         durationInMillis            = newestTimestampInMillis - oldestTimestampInMillis;

         samples.forEach(sample => {
            var sampeTimestampInMillis = (new Date(sample.timestamp)).getTime();
            var relativeDuration = (sampeTimestampInMillis - oldestTimestampInMillis) / durationInMillis;
            result.averageSpeeds.push({x: relativeDuration, y: kmhToKts(sample.averageSpeed)});
            result.maximumSpeeds.push({x: relativeDuration, y: kmhToKts(sample.maximumSpeed)});
            result.minimumSpeeds.push({x: relativeDuration, y: kmhToKts(sample.minimumSpeed)});
            if (kmhToKts(sample.maximumSpeed) > maxSpeedInKts) {
               maxSpeedInKts = kmhToKts(sample.maximumSpeed);
            }
         });

         result.oldestTimestampInMillis = oldestTimestampInMillis;
         result.middleTimestampInMillis = middleTimestampInMillis;
         result.newestTimestampInMillis = newestTimestampInMillis;
         result.maxKtsScaleValue        = maxSpeedInKts;
      }

      return result;
   };

   var getTimeAsText = function getTimeAsText(dateInMillis) {
      var date = new Date(dateInMillis);
      var hours = date.getHours();
      var minutes = date.getMinutes();
      
      if (minutes < 10) {
         minutes = '0' + minutes;
      }
      
      return hours + ':' + minutes;
   };

   this.display = function display(samplesMessage) {
      var convertedData = convertSampleData(samplesMessage.twoHoursHistory.data);

      var chartConfig = {
         type: 'line',
         data: {
            datasets: [{
                  label: 'average',
                  borderColor: context => colorGradient.get(convertedData.maxKtsScaleValue, context),
                  backgroundColor: 'rgb(0,0,0)',
                  yAxisID: 'ktsScale',
                  data: convertedData.averageSpeeds,
            }, {
                  label: 'maximum',
                  borderColor: 'rgb(230, 230, 230)',
                  backgroundColor: 'rgb(230, 230, 230)',
                  yAxisID: 'ktsScale',
                  data: convertedData.maximumSpeeds
            }, {
                  label: 'minimum',
                  borderColor: 'rgb(230, 230, 230)',
                  backgroundColor: 'rgb(230, 230, 230)',
                  yAxisID: 'ktsScale',
                  data: convertedData.minimumSpeeds
            }]
         },
         options: {
            scales: {
               x: {
                  type: 'linear',
                  position: 'bottom',
                  min: 0,
                  max: 1,
                  ticks: {
                     stepSize: 0.5,
                     callback: function(value, index) {
                        var results = [convertedData.oldestTimestampInMillis, convertedData.middleTimestampInMillis, convertedData.newestTimestampInMillis].map(getTimeAsText);
                        return results[index];
                     }
                  }
               },
               ktsScale: {
                  title: {
                     display: true,
                     text: 'kts'
                  },
                  position: 'left',
                  min: 0,
                  max: convertedData.maxKtsScaleValue,
                  beginAtZero: true,
                  grid: {
                     display: false
                  }
               },
               beaufortScale: {
                  title: {
                     display: true,
                     text: 'bft'
                  },
                  position: 'right',
                  min: 0,
                  max: convertedData.maxKtsScaleValue,
                  beginAtZero: true,
                  ticks: {
                     stepSize: 1,
                     callback: function(value) {
                        var bft;
                        var index = minimumKtsForBft.indexOf(value);
                        if (index >= 0) {
                           bft = index; 
                        }
                        return bft;
                     }
                  }
               }

            },
            elements: {
               point: {
                  radius: 0
               }
            },
            plugins: {
               legend: {
                  display: false
               }
            }
         }
      };
      
      if (chart === undefined) {
         chart = new Chart($('#windChart'), chartConfig);
      } 
   };
};